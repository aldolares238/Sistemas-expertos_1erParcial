#Nombre: Aldo Emiliano Chavez Lares
#Registro: 21310238
#Grupo: 7F1
#Tema: El Subsistema de Aprendizaje

import random

# Base de Conocimiento Inicial
knowledge_base = [
    {"symptom": "hojas_amarillas", "diagnosis": "deficiencia_de_nutrientes", "probability": 0.7},
    {"symptom": "hojas_marchitas", "diagnosis": "falta_de_agua", "probability": 0.8},
]

# Memoria de Trabajo (datos efímeros)
working_memory = {}

# Función para aprender nuevas reglas
def aprender_nuevas_reglas(sintoma, diagnostico):
    print("\nAprendiendo nuevas reglas...")
    # Verifica si la regla ya existe
    existe_regla = any(regla["symptom"] == sintoma for regla in knowledge_base)
    
    if not existe_regla:
        # Añade la nueva regla con una probabilidad inicial
        nueva_regla = {"symptom": sintoma, "diagnosis": diagnostico, "probability": 0.5}
        knowledge_base.append(nueva_regla)
        print(f"Nueva regla aprendida: {sintoma} -> {diagnostico}")
    else:
        print(f"La regla para el síntoma '{sintoma}' ya existe en la base de conocimiento.")

# Función para ajustar parámetros basados en datos nuevos
def ajustar_parametros(sintoma, diagnostico):
    print("\nAjustando parámetros...")
    for regla in knowledge_base:
        if regla["symptom"] == sintoma and regla["diagnosis"] == diagnostico:
            # Ajusta la probabilidad de la regla (ejemplo simple de ajuste)
            regla["probability"] = min(1.0, regla["probability"] + random.uniform(0, 0.1))
            print(f"Probabilidad ajustada para la regla '{sintoma} -> {diagnostico}': {regla['probability']:.2f}")

# Función para proporcionar una explicación sobre el aprendizaje
def explicar_aprendizaje(sintoma, diagnostico):
    print("\nExplicación del Aprendizaje:")
    if any(regla["symptom"] == sintoma and regla["diagnosis"] == diagnostico for regla in knowledge_base):
        print(f"La regla '{sintoma} -> {diagnostico}' ya está en la base de conocimiento.")
    else:
        print(f"La regla '{sintoma} -> {diagnostico}' ha sido aprendida y añadida a la base de conocimiento.")
    
    # Explica el ajuste de parámetros
    ajustar_parametros(sintoma, diagnostico)

# Función que muestra las conclusiones del motor de inferencia con aprendizaje
def mostrar_conclusion(sintoma, diagnostico):
    print("\nConclusión del Sistema Experto:")
    print(f"El síntoma ingresado: '{sintoma}' sugiere el diagnóstico: '{diagnostico}'.")
    
    # Proporcionar una explicación sobre el diagnóstico
    explicar_diagnostico(sintoma, diagnostico)
    
    # Ejecutar las órdenes basadas en el diagnóstico
    ejecutar_ordenes(diagnostico)
    
    # Proporcionar una explicación sobre las acciones ejecutadas
    explicar_acciones(diagnostico)
    
    # Explicar el aprendizaje
    explicar_aprendizaje(sintoma, diagnostico)

# Función que verifica si una nueva entrada es coherente con la base de conocimiento
def es_coherente(sintoma, diagnostico):
    for regla in knowledge_base:
        if regla["symptom"] == sintoma and regla["diagnosis"] != diagnostico:
            return False
    return True

# Subsistema de Adquisición de Conocimiento: Solicita más información al usuario
def adquirir_conocimiento():
    print("\nEl conocimiento actual es insuficiente para llegar a una conclusión.")
    
    # Solicita más información del usuario
    sintoma = input("Ingrese un nuevo síntoma que haya observado: ").strip().lower()
    diagnostico = input("Ingrese el diagnóstico relacionado con ese síntoma: ").strip().lower()
    
    # Valida la coherencia del nuevo conocimiento
    if es_coherente(sintoma, diagnostico):
        working_memory["sintoma"] = sintoma
        working_memory["diagnostico"] = diagnostico
        print(f"Nuevo conocimiento incorporado: {sintoma} - {diagnostico}")
        mostrar_conclusion(sintoma, diagnostico)
        aprender_nuevas_reglas(sintoma, diagnostico)
    else:
        print("La información proporcionada es inconsistente con la base de conocimiento existente.")
        adquirir_conocimiento()

# Motor de Inferencia: Intenta inferir un diagnóstico basado en la memoria de trabajo
def motor_de_inferencia():
    sintoma = input("Ingrese el síntoma de su planta (ej: hojas_amarillas, hojas_marchitas, etc.): ").strip().lower()
    
    for regla in knowledge_base:
        if regla["symptom"] == sintoma:
            mostrar_conclusion(sintoma, regla["diagnosis"])
            return
    
    # Si no se puede hacer una inferencia, se invoca el subsistema de adquisición de conocimiento
    adquirir_conocimiento()

# Función principal para interactuar con el usuario
def interactuar_con_usuario():
    print("Bienvenido al Sistema Experto de Diagnóstico de Enfermedades de Plantas.")
    print("Por favor, ingrese los síntomas que ha observado.")
    motor_de_inferencia()

# Función para ejecutar órdenes basadas en el diagnóstico
def ejecutar_ordenes(diagnostico):
    if diagnostico == "deficiencia_de_nutrientes":
        print("Ejecutando orden: Aumentar la cantidad de nutrientes en el suelo.")
        # Aquí se agregarían las instrucciones para ajustar los nutrientes.
    
    elif diagnostico == "falta_de_agua":
        print("Ejecutando orden: Aumentar la cantidad de agua en la planta.")
        # Aquí se agregarían las instrucciones para ajustar el riego.
    
    else:
        print("No se requiere acción para el diagnóstico proporcionado.")

# Función para proporcionar una explicación sobre el diagnóstico
def explicar_diagnostico(sintoma, diagnostico):
    print("\nExplicación del Diagnóstico:")
    print(f"Síntoma detectado: '{sintoma}'")
    print(f"Diagnóstico sugerido: '{diagnostico}'")
    print("La conclusión se basa en las siguientes reglas de la base de conocimiento:")
    
    for regla in knowledge_base:
        if regla["symptom"] == sintoma:
            print(f"- Si el síntoma es '{regla['symptom']}', entonces el diagnóstico es '{regla['diagnosis']}'.")

# Función para proporcionar una explicación sobre las acciones ejecutadas
def explicar_acciones(diagnostico):
    print("\nExplicación de las Acciones Ejecutadas:")
    if diagnostico == "deficiencia_de_nutrientes":
        print("Acción ejecutada: Aumentar la cantidad de nutrientes en el suelo.")
        print("Razón: El diagnóstico de deficiencia de nutrientes sugiere que las plantas necesitan más nutrientes para mejorar su salud.")
    
    elif diagnostico == "falta_de_agua":
        print("Acción ejecutada: Aumentar la cantidad de agua en la pla
