#Nombre: Aldo Emiliano Chavez Lares
#Registro: 21310238
#Grupo: 7F1
#Tema: Subsistema de Adquisicion de Conocimiento

# Base de Conocimiento (almacén permanente de reglas)
knowledge_base = [
    {"symptom": "hojas_amarillas", "diagnosis": "deficiencia_de_nutrientes"},
    {"symptom": "hojas_marchitas", "diagnosis": "falta_de_agua"},
    {"symptom": "manchas_negras", "diagnosis": "enfermedad_fúngica"},
]

# Función que verifica si una regla ya existe en la base de conocimiento
def existe_conocimiento(sintoma, diagnostico):
    for regla in knowledge_base:
        if regla["symptom"] == sintoma and regla["diagnosis"] == diagnostico:
            return True
    return False

# Función del subsistema de adquisición de conocimiento
def adquirir_conocimiento(nueva_regla):
    sintoma = nueva_regla["symptom"]
    diagnostico = nueva_regla["diagnosis"]
    
    # Verifica si la nueva regla ya existe en la base de conocimiento
    if existe_conocimiento(sintoma, diagnostico):
        print(f"El conocimiento sobre el síntoma '{sintoma}' ya está en la base de conocimiento.")
    else:
        # Añade el nuevo conocimiento si no existe
        knowledge_base.append(nueva_regla)
        print(f"Nuevo conocimiento agregado: {nueva_regla}")

# Función que simula la interacción con un experto humano
def interactuar_con_experto():
    print("Bienvenido al Subsistema de Adquisición de Conocimiento.")
    sintoma = input("Ingrese un síntoma nuevo que haya identificado: ").strip().lower()
    diagnostico = input("Ingrese el diagnóstico relacionado con ese síntoma: ").strip().lower()
    
    # Nueva regla a adquirir
    nueva_regla = {"symptom": sintoma, "diagnosis": diagnostico}
    
    # Adquirir y validar el conocimiento
    adquirir_conocimiento(nueva_regla)

# Punto de entrada del programa
if __name__ == "__main__":
    interactuar_con_experto()
    
    # Mostrar la base de conocimiento actualizada
    print("\nBase de conocimiento actualizada:")
    for regla in knowledge_base:
        print(f"Síntoma: {regla['symptom']}, Diagnóstico: {regla['diagnosis']}")
