#Nombre: Aldo Emiliano Chavez Lares
#Registro: 21310238
#Grupo: 7F1
#Tema Control de la Coherencia

# Base de Conocimiento: Almacena las reglas permanentes
knowledge_base = [
    {"symptom": "hojas_amarillas", "diagnosis": "deficiencia_de_nutrientes"},
    {"symptom": "hojas_marchitas", "diagnosis": "falta_de_agua"},
    {"symptom": "manchas_negras", "diagnosis": "enfermedad_fúngica"},
]

# Función para verificar si el nuevo conocimiento es coherente con la base de conocimiento
def es_coherente(nueva_regla):
    sintoma = nueva_regla["symptom"]
    nuevo_diagnostico = nueva_regla["diagnosis"]
    
    for regla in knowledge_base:
        if regla["symptom"] == sintoma and regla["diagnosis"] != nuevo_diagnostico:
            # Inconsistencia detectada
            print(f"Inconsistencia detectada: El síntoma '{sintoma}' ya está asociado con el diagnóstico '{regla['diagnosis']}' y no con '{nuevo_diagnostico}'.")
            return False
    return True

# Función del subsistema de control de la coherencia
def control_coherencia(nueva_regla):
    if es_coherente(nueva_regla):
        # Si la nueva regla es coherente, se agrega a la base de conocimiento
        knowledge_base.append(nueva_regla)
        print(f"Nuevo conocimiento agregado de manera coherente: {nueva_regla}")
    else:
        # Si es inconsistente, se rechaza
        print("El nuevo conocimiento no se puede agregar debido a inconsistencias.")

# Función que simula la interacción con un experto humano
def interactuar_con_experto():
    print("Bienvenido al Subsistema de Control de Coherencia.")
    sintoma = input("Ingrese un síntoma que haya identificado: ").strip().lower()
    diagnostico = input("Ingrese el diagnóstico relacionado con ese síntoma: ").strip().lower()
    
    # Nueva regla que el experto intenta introducir
    nueva_regla = {"symptom": sintoma, "diagnosis": diagnostico}
    
    # Verificación y control de coherencia
    control_coherencia(nueva_regla)

# Punto de entrada del programa
if __name__ == "__main__":
    interactuar_con_experto()
    
    # Mostrar la base de conocimiento actualizada
    print("\nBase de conocimiento actualizada:")
    for regla in knowledge_base:
        print(f"Síntoma: {regla['symptom']}, Diagnóstico: {regla['diagnosis']}")
